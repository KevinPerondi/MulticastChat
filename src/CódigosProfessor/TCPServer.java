package CÃ³digosProfessor;/** * TCPServer: Servidor para conexao TCP com Threads Descricao: Recebe uma * conexao, cria uma thread, recebe uma mensagem e finaliza a conexao *//*  Servidor:  - criar o socket de servidor:       -> porta do servico.  - aguardar conexoes:       -> cliente conecta -> criar socket.       -> criar um fluxo para realizar a comunicacao com o cliente.    Thread cliente:  - recebe o socket.  - cria objetos leitura/escrita.  - realiza o envio/recebimento de mensagem.  - fechar o objeto leitura/escrita e socket. */import java.net.*;import java.io.*;public class TCPServer {    public static void main(String args[]) {        try {            int serverPort = 7896; // porta do servidor                        /* cria um socket e mapeia a porta para aguardar conexao */            ServerSocket listenSocket = new ServerSocket(serverPort);            while (true) {                System.out.println("Servidor aguardando conexao ...");                /* aguarda conexoes */                Socket clientSocket = listenSocket.accept();                System.out.println("Cliente conectado ... Criando thread ...");                /* cria um thread para atender a conexao */                ClienteThread c = new ClienteThread(clientSocket);                            } //while        } catch (IOException e) {            System.out.println("Listen socket:" + e.getMessage());        } //catch    } //main} //class/** * Classe ClienteThread: Thread responsavel pela comunicacao Descricao: Rebebe um * socket, cria os objetos de leitura e escrita e aguarda msgs clientes */class ClienteThread extends Thread {    DataInputStream in;    DataOutputStream out;    Socket clientSocket;    public ClienteThread(Socket aClientSocket) {        try {            clientSocket = aClientSocket;            in = new DataInputStream(clientSocket.getInputStream());            out = new DataOutputStream(clientSocket.getOutputStream());            this.start();            /* inicializa a thread */        } catch (IOException e) {            System.out.println("ClienteThread:" + e.getMessage());        } //catch    } //construtor    /* metodo executado ao iniciar a thread - start() */    public void run() {        try {            String data = in.readUTF();            /* aguarda o envio de dados */            System.out.println("Cliente disse: " + data);            if (data.equals("fim")){            in.close();            out.close();            clientSocket.close();}            /* finaliza a conexao com o cliente */        } catch (EOFException e) {            System.out.println("EOF: " + e.getMessage());        } catch (IOException e) {            System.out.println("leitura: " + e.getMessage());        } //catch    } //run} //class